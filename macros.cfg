
[gcode_macro G29]
gcode = 
	G28
	BED_MESH_CALIBRATE
	M190 S100
	G4 60000
	G0 X0 Y0 Z10 F6000
	BED_MESH_PROFILE save=default

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28
	

[gcode_macro M73]
rename_existing: M733
variable_p: 0.0
variable_r: 0.0
variable_leds: 48
variable_offset: 45
default_parameter_P: 0.0
default_parameter_R: 0.0
gcode:
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}
  {% if 'P' in params %}
  {% for led in range(0, ((((params.P)|float)/100*leds)|int)-1  ) %}
    SET_LED LED=caselight RED=1.0 GREEN=0.5 BLUE=0.3 INDEX={led+offset}
  {% endfor %}
    SET_LED LED=caselight RED={((((params.P)|float)/100*leds)|float)-((((params.P)|float)/100*leds)|int)} GREEN=0.5 BLUE=0.2 INDEX={offset+((((params.P)|float)/100*leds)|int)} TRANSMIT=1
  {% for led in range((((params.P|float) /100*leds)|int)+1, leds) %}
    SET_LED LED=caselight RED=0 GREEN=0 BLUE=0 INDEX={led+offset} TRANSMIT=1
  {% endfor %}
  {% endif %}
  

[gcode_macro M141]
default_parameter_s = 0
gcode = 
	SET_TEMPERATURE_FAN_TARGET temperature_fan=exhaust_fan target={S}

[gcode_macro M205]
gcode = 

[gcode_macro M300]
default_parameter_s = 1000
default_parameter_p = 100
gcode = 
	SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={1/(S|float)}
	G4 P{P}
	SET_PIN PIN=BEEPER_pin VALUE=0 CYCLE_TIME={1/(S|float)}

[gcode_macro M600]
default_parameter_x = 50
default_parameter_y = 355
default_parameter_z = 10
default_parameter_r = 240
gcode = 
	BEEP I=6 BEEPMS=100 WAITMS=200
	SAVE_GCODE_STATE NAME=M600_state
	PAUSE
	G91
	G1 E-.8 F2700
	G1 Z{Z} F900
	G90
	G1 X{X} Y{Y} F18000
	M300
	G91
	G1 E-100 F1000
	M109 S{R}
	RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M701]
gcode = 
	M83
	G1 E100 F300
	G1 E-2 F1800
	M82

[gcode_macro M702]
gcode = 
	M83
	G1 E15 F300
	G1 E-150 F1800
	M82

[gcode_macro BEEP]
default_parameter_i = 3
default_parameter_beepms = 200
default_parameter_waitms = 200
gcode = 
	{% for times in range(I|int) %}
	M300 P{BEEPMS|int}
	G4 P{WAITMS|int}
	{% endfor %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = BASE_BED_MESH_CALIBRATE
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G1 X125 Y125 Z30 F6000
	BASE_BED_MESH_CALIBRATE

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro CLEAN_NOZZLE]
variable_location_bucket_rear:      True
variable_enable_purge:              True
variable_purge_len:            15	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      230	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             0.75            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            2            ; Dwell/wait time, in seconds, after purging and retracting.
variable_brush_top:            1
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              3	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        5000	         ; Nozzle wipe speed in mm/min.
variable_brush_start:     50
variable_brush_width:          52	
variable_brush_front:       0          
variable_brush_depth:       0          
variable_bucket_left_width:    67
variable_bucket_right_width:   40            
variable_bucket_gap:           22	
variable_bucket_start: 0
variable_bucket_pos:            1	        
gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}
      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle
      ## Set to absolute positioning.
      G90
      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
      ## Check if user enabled purge option or not.
      {% if enable_purge %}
         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=bucket_pos VALUE={(range(2) | random)}
         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}
         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}
         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}
      {% endif %}
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}
      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}
      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
         G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
      {% endfor %}
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{bucket_left_width / 4} F{prep_spd_xy} 
      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle
   {% else %}
      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!
   {% endif %}

[gcode_macro COOLDOWN]
gcode = 
	M104 S0
	M140 S0
	M141 S0
	LIGHTS  R=0 G=0 B=1

[gcode_macro LIGHT_OFF]
gcode = 
	LIGHTS R=0 G=0 B=0

[gcode_macro LIGHT_ON]
gcode = 
	LIGHTS  R=1 G=1 B=0.5

[gcode_macro LIGHTS]
default_parameter_R = 1
default_parameter_G = 1
default_parameter_B = 1
variable_leds = 135
gcode:
  {% for led in range(1, leds-1  ) %}
    SET_LED LED=caselight RED={R} GREEN={G} BLUE={B} INDEX={led} TRANSMIT=0
  {% endfor %}
    SET_LED LED=caselight RED={R} GREEN={G} BLUE={B} INDEX=135 TRANSMIT=1

[gcode_macro LOAD_FILAMENT]
gcode = 
	M83
	G1 E100 F300
	G1 E-10 F1800
	M82
	M117 Loaded

[gcode_macro PAUSE]
rename_existing = BASE_PAUSE
default_parameter_x = 10
default_parameter_y = 300
default_parameter_z = 10
default_parameter_e = 1
gcode = 
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 E-{E} F2100
	G1 Z{Z}
	G90
	G1 X{X} Y{Y} F6000

[gcode_macro PRIME_LINE]
gcode = 
	M83
	G1 X10 Y10 Z1.5 F5000.0 ; Move to start position
	G0 Z0.15 F300
	G1 E20 F100
	G1 Z15 F600
	G92 E0 ; Reset Extruder
	G1 X50 Y50 F6000.0 ; Move over to prevent blob squish
	M82

[gcode_macro PRINT_START]
default_parameter_bed = 75
default_parameter_extruder = 200
default_parameter_chamber = 40
gcode = 
	G28
	G90
	G0 X150 Y150 Z10
	M107
	M104 S180
	LIGHTS R=0.1 G=0.1 B=0.1
	M117 Homing
	LIGHTS R=0.2 G=0.2 B=0.2
	M140 S{BED}
	M117 Heating bed
	M190 S{BED}
	LIGHTS R=0.3 G=0.3 B=0.3
	M141 S{CHAMBER}
	LIGHTS R=0.5 G=0.5 B=0.5
	M117 Homing and leveling
	G32                            ; home all axes
	LIGHTS R=0.8 G=0.8 B=0.5
	BED_MESH_PROFILE LOAD=default
	M117 Heating extruder
	M109 S{EXTRUDER}
	M117 Stabilizing
	WAIT_PWM

[gcode_macro PRINT_START2]
gcode =
	CLEAN_NOZZLE
	G90
	G28 Z
	G21 ;  unit in mm
	G92 E0 ; set extruder to zero
	M82 ; use absolute distances
	M107 ; fan off
	LIGHTS R=1 G=1 B=0.75
	M117 Printing

[gcode_macro PRINT_END]
gcode = 
	M400                           ; wait for buffer to clear
	G92 E0                         ; zero the extruder
	G1 E-2.0 F3600                ; retract filament
	G91                            ; relative positioning
	G0 Z1.00 X20.0 Y40.0 F20000    ; move nozzle to remove stringing
	TURN_OFF_HEATERS
	G1 Z2 F3000                    ; move nozzle up 2mm
	G90                            ; absolute positioning
	G0 X50 Y305 F3600            ; park nozzle at rear
	M141 S30
	M106 S255
	M117 Print done.
	LIGHTS  R=1 G=1 B=0.75
	BED_MESH_CLEAR
	UPDATE_DELAYED_GCODE ID=SHUT_OFF DURATION=600
	
[delayed_gcode SHUT_OFF]
gcode:
  M107
  LIGHT_OFF
  M141 S45

[gcode_macro PURGE_FILAMENT]
default_parameter_f = 300
gcode = 
	M83
	G1 E100 F{F}
	G1 E-2 F1800
	M82
	M117 Purged

[gcode_macro RESUME]
rename_existing = BASE_RESUME
default_parameter_e = 1
gcode = 
	G91
	G1 E{E} F2100
	G90
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
	BASE_RESUME

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	M83
	G1 E15 F300
	G1 E-150 F1800
	M82
	M117 Unloaded.

## use: WAIT_PWM S=0.50
[gcode_macro WAIT_PWM]
# use default to insure S is always set
default_parameter_S: 0.35
variable_pwm: 0.35
variable_first: 'true'
gcode:
  # first execution?
  {% if printer["gcode_macro WAIT_PWM"].first == 'true'%}
    {% if printer['heater_bed'].power|float > S|float %}
      # store variables
      SET_GCODE_VARIABLE MACRO=WAIT_PWM VARIABLE=first VALUE='"false"'
      SET_GCODE_VARIABLE MACRO=WAIT_PWM VARIABLE=pwm VALUE={S|float}
      # execute wait
      BASE_PAUSE
      UPDATE_DELAYED_GCODE ID=DELAY_PWM DURATION=1
    {% endif %}
  {% else %}
    # done
    SET_GCODE_VARIABLE MACRO=WAIT_PWM VARIABLE=first VALUE='"true"'
    BASE_RESUME
    PRINT_START2
  {% endif %}

[delayed_gcode DELAY_PWM]
gcode:
  # only done to increase readability
  {% set pwm = printer["gcode_macro WAIT_PWM"].pwm %}
  {% set act = printer['heater_bed'].power %}
  # check what to do
  {% if act|float > pwm|float %}
    UPDATE_DELAYED_GCODE ID=DELAY_PWM DURATION=1
  {% else %}
    WAIT_PWM
  {% endif %}