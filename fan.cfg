#####################################################################
# 	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - FAN0 connector
pin: FAN0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
shutdown_speed = 1

[fan]
pin: HE3
##	Print Cooling Fan - FAN1 connector
kick_start_time: 0.5
off_below: 0.1

[controller_fan controller_fan1]
##	Controller fan - FAN4 connector
pin: FAN4
kick_start_time: 0.5
#heater: heater_bed
#heater_temp: 45.0
fan_speed = 1
shutdown_speed = 1.0
#cycle_time: 0.0001
#hardware_pwm: False


[temperature_sensor mcu]
sensor_type: temperature_mcu


[temperature_fan chamber]
##	Exhaust fan - FAN3 connector
pin = FAN3
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 0.5
hardware_pwm: False
off_below = 0.15
#[temperature_sensor chamber]
gcode_id = C
sensor_type = ATC Semitec 104GT-2
## Sensor in T0 connector
sensor_pin = T0
min_temp = 0
max_temp = 70
max_speed = 1
min_speed = 0.0
target_temp = 0
control = watermark
max_delta: 2.0
#pid_kp = 2
#pid_ki = 5
#pid_kd = 0.5
#pid_deriv_time: 2.0

##  Nevermore Micro filter
##  FAN2 connector
[fan_generic filter]
pin: FAN2
kick_start_time: 0.5
off_below: 0.10

[temperature_sensor Cellar]
## Electronic compartment sensor
## T1 connector
sensor_type = ATC Semitec 104GT-2
sensor_pin = T1
gcode_id = CLR

[temperature_sensor Nevermore]
## Under bed sensor in T2 connector
sensor_type = Generic 3950
sensor_pin = T2
gcode_id = NVR


[temperature_fan CPU]
pin: FAN5
shutdown_speed: 1
control: watermark
max_delta: 2.0
min_temp: 5
max_temp: 75
sensor_type = temperature_host
target_temp: 45.0
max_speed: 1
gcode_id = CPU

#[temperature_sensor endstop]
#sensor_type = BME280
#i2c_mcu: rpi
#i2c_bus: i2c.1
#gcode_id = E
#min_temp: 10
#max_temp: 100

####################################################################
  Macros
####################################################################

[gcode_macro M141]
description: Set temperature of chamber fan
gcode:
  # set default parameter value
  {%set temp = params.S|default(0) %}
  SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={temp}
    
[gcode_macro _SET_FILTER]
description: Helper: Set Nevermore filter speed
gcode:
  # set default parameter value
  {% set speed = params.S|default(0) %}
  SET_FAN_SPEED FAN=filter SPEED={speed}

##  Filter On
[gcode_macro FILTER_ON]
description: Helper: Nevermore on
gcode:
  _SET_FILTER S={printer['gcode_macro _USER_VARIABLE'].filter_on}
  
##  Filter Fan Control in Mainsail
[gcode_macro FILTER]
gcode:
  {% if printer['fan_generic filter'].speed|float > 0.0 %}
    _SET_FILTER
  {% else %}
    FILTER_ON
  {% endif %}
  _FILTER_INFO
  
[delayed_gcode _DELAY_FILTER_OFF]
gcode:
  {% if (printer.idle_timeout.state|lower != "printing") %}
    _SET_FILTER
    _FILTER_INFO
  {% endif %}

##  Chamber Ventilation Control in Mainsail
[gcode_macro VENT]
description: Toggle Chamber fan
gcode:
    {% set act_target = printer['temperature_fan chamber'].target|int %}
    {% set temp_on = printer['gcode_macro _USER_VARIABLE'].vent_on|int %}
    {% if act_target > 0 and act_target <= temp_on %}
        M141 S0
    {% else %}
        M141 S{temp_on}
    {% endif %}
    _VENT_INFO

[delayed_gcode _DELAY_VENT_OFF]
gcode:
  {% if (printer.idle_timeout.state|lower != "printing") %}
    M141
    _VENT_INFO
  {% endif %}

[gcode_macro _VENT_INFO]
description: Helper: Print chamber fan temperature
gcode:
  {% if printer['temperature_fan chamber'].target|int == 0 %}
    {action_respond_info("Chamber fan off")}
  {% else %}
    {action_respond_info("Chamber fan target temp: %2dC" % (printer['temperature_fan chamber'].target))}
  {% endif %}

[gcode_macro _FILTER_INFO]
description: Helper: Print Nevermore speed
gcode:
  {% if printer['fan_generic filter'].speed|float > 0.0 %}
    {% set state='on'%}
  {% else %}
    {% set state='off'%}
  {% endif %}
  {action_respond_info("Filter Fan %s" % (state))}

#####################################################################
#  Display Menu definition                                          #
#####################################################################
##  Disable stock config
[menu __main __control __fanonoff]
type: disabled

[menu __main __control __fanspeed]
type: disabled

## Add menu for fan, chamber and filter
[menu __main __control __fan]
type: list
name: Fan 
index: 5

[menu __main __control __fan __partcooling]
type: list
enable: {'fan' in printer}
name: Fan {'%3d' % (printer.fan.speed*100)}%

[menu __main __control __fan __chamber]
type: list
enable: {'temperature_fan chamber' in printer}
name: Chamber {'%2dC' % (printer['temperature_fan chamber'].target) if printer['temperature_fan chamber'].target else 'OFF'}

[menu __main __control __fan __filter]
type: list
enable: {'fan_generic filter' in printer}
name: Filter {'%3d' % (printer['fan_generic filter'].speed*100)}%

[menu __main __control __fan __partcooling __fanonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
  M106 S{255 if menu.input else 0}

[menu __main __control __fan __partcooling __fanspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
  M106 S{'%d' % (menu.input*255)}

[menu __main __control __fan __chamber __chamberonoff]
type: input
name: Toggle: {'ON' if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: 0
input_max: 1
input_step: 1
gcode:
  {% set temp_on = printer["gcode_macro _USER_VARIABLE"].vent_on|int %}
  M141 S{temp_on if menu.input else 0}    
    
[menu __main __control __fan __chamber __chamberfanspeed]
type: input
name: Temp: {'%2dC' % (menu.input) if menu.input else 'OFF'}
input: {printer['temperature_fan chamber'].target}
input_min: {printer.configfile.settings['temperature_fan chamber'].min_temp|int}
input_max: {printer.configfile.settings['temperature_fan chamber'].max_temp|int}
input_step: 1
gcode:
    M141 S{'%d' % (menu.input)}

[menu __main __control __fan __filter __filteronoff]
type: input
name: Toggle: {'ON ' if menu.input else 'OFF'}
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
 {% if menu.input %}
   FILTER_ON
 {% else %}
   _SET_FILTER S=0.0
 {% endif %}

[menu __main __control __fan __filter __filterspeed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic filter'].speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    _SET_FILTER S={menu.input}