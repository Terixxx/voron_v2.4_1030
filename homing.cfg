
#####################################################################
#  Homing definition
#####################################################################
##  USE either safe homing or homing override
#[safe_z_home]
#home_xy_position: 232,355
#speed: 100.0
#z_hop: 7.5
#z_hop_speed: 20.0
#move_to_previous: False

[homing_override]
axes: z
set_position_z: 0
gcode:
  SAVE_GCODE_STATE NAME=STATE_HOMING
  G91          ; set relative
  G0 Z7.5 F800 ; lift nozzle
  G90          ; set absolute
  ## reduce current of Z motors
  _SET_ACC VAL=HOME
  _SET_Z_CURRENT VAL=HOME
  # Home X and Y only for G28 or G28 XYZ
      #reset parameters
    {% set X, Y, Z = False, False, False %}

    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        
        {% set X, Y, Z = True, True, True %}
 
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}
        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}
        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}      
        {% if 'X' in params
          and 'Y' in params 
          and 'Z' in params %}           
            #reset homing state variables
            #if homing all axes
            Homing_Variables reset=1            
         {% endif %}         
    {% endif %}

  {% if 'Z' in params %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
      Homing_Variables axis=X 
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
      Homing_Variables axis=Y
    {% endif %}
  {% else %}
    G28 X Y
    Homing_Variables axis=X 
    Homing_Variables axis=Y
  {% endif %}      
  ##	XY Location of the Z Endstop Switch
  ##	Update X0 and Y0 to your values (such as X157, Y305) after going through
  ##	Z Endstop Pin Location Definition step.
  # Move to Endstop position
      {% if Z %}
        #check if there is already a G28 Z running that has not completed yet
        {% set outermost_z_home_call = not(printer["gcode_macro Homing_Variables"].z_home_running) %}
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ True }
        {% endif %}


        #lock probe to prevent repeated docking and re-attaching
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_lock_probe VALUE={ True } 
       
        Homing_ZHome

        #Verify probe is still attached before
        Homing_SetProbeState action=query

        #set Z axis as homed
        Homing_Variables axis=Z  

        #perform additional calibration on Z axis
        Homing_ZCalibrate

        #set Z axis as calibrated
        SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=homing_calibration_state VALUE=True 

        #if this is the outermost call to G28 Z, note that there is no longer a running Z home, and dock probe if necessary
        {% if outermost_z_home_call %}
            SET_GCODE_VARIABLE MACRO=Homing_Variables VARIABLE=z_home_running VALUE={ False }
        {% endif %}

    {% endif %}

    #park the toolhead
   Homing_ParkTool## return to org current settings
  _SET_Z_CURRENT
  _SET_ACC
  # Lift Z
  G0 Z20 F1800
  RESTORE_GCODE_STATE NAME=STATE_HOMING

#####################################################################
#  Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _SET_ACC]
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int * 2 / 3 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}
  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}