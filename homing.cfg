
#####################################################################
#  Homing definition
#####################################################################
##  USE either safe homing or homing override
#[safe_z_home]
#home_xy_position: 232,355
#speed: 100.0
#z_hop: 7.5
#z_hop_speed: 20.0
#move_to_previous: False

[homing_override]
axes: z
set_position_z: 0
gcode:
  SAVE_GCODE_STATE NAME=STATE_HOMING
  G91          ; set relative
  G0 Z7.5 F800 ; lift nozzle
  G90          ; set absolute
  ## reduce current of Z motors
  SET_ACC VAL=HOME
  SET_Z_CURRENT VAL=HOME
  # Home X and Y only for G28 or G28 XYZ
  {% if 'Z' in params %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
  {% else %}
    G28 X Y
  {% endif %}      
  ##	XY Location of the Z Endstop Switch
  ##	Update X0 and Y0 to your values (such as X157, Y305) after going through
  ##	Z Endstop Pin Location Definition step.
  # Move to Endstop position
  G0 X204 Y301 F7200 
  # Home Z
  G28 Z
  ## move nozzle from pin
  G0 Z2 F300
  ## return to org current settings
  SET_Z_CURRENT
  SET_ACC
  # Lift Z
  G0 Z10 F1800
  RESTORE_GCODE_STATE NAME=STATE_HOMING


#####################################################################
#  Macros
#####################################################################
## conditional home
[gcode_macro CG28]
description: Helper: conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro SET_ACC]
description: Set accel and accel_to_decel value
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int / 2 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro SET_ACC"].accel_to_decel %}
  {% endif %}
  {% if val !=  printer["gcode_macro SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=SET_ACC VARIABLE=last_val VALUE='"{val}"'
    #{action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}