[pause_resume]
recover_velocity = 200

[display_status]

[virtual_sdcard]
path: /home/pi/gcode_files

[gcode_arcs]
resolution: 0.1

[respond]
default_type: command

#####################################################################
#  Macros
#####################################################################

[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  #SDCARD_RESET_FILE


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: 'false'
gcode:
  ##### Get Boundaries #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Get user defines #####
  {% set purge_x = printer["gcode_macro _USER_VARIABLE"].purge_x %}
  {% set purge_y = printer["gcode_macro _USER_VARIABLE"].purge_y %}

  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set vent_on = printer["gcode_macro _USER_VARIABLE"].vent_on|int %}
  {% set retract = printer["gcode_macro _USER_VARIABLE"].retract_cancel|float * -1 %}
  {% set fan_off = printer['gcode_macro _USER_VARIABLE'].fan_run_after_print|int * 60 %}
  {% set vent_off = printer['gcode_macro _USER_VARIABLE'].fan_run_after_print|int * 60 + 5 %}
  ##### Get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_chamber = printer['gcode_macro _USER_VARIABLE'].chamber|lower %}
  {% set ena_caselight = printer['gcode_macro _USER_VARIABLE'].caselight|lower %}
  {% set ena_filter = printer['gcode_macro _USER_VARIABLE'].filter|lower %}
  ##### store min and current extrution temp in variable ##### 
  {% set extruder_min = printer.configfile.config.extruder.min_extrude_temp|int + add_temp %}
  ##### Calculate save move #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"true"'
  M117 Cancel
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % extruder_min)}
      M109 S{extruder_min} ; heat extruder and wait
  {% endif %}
  M83
  G1 E{retract} F1800
  G91                                                       ; relative positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000 
  TURN_OFF_HEATERS                                          ; turn off heaters
  G90                                                       ; absolute positioning
  G0 X{purge_x} Y{purge_y} F18000                           ; park nozzle at brush bin
  M107                                                      ; turn off fan
  {% if ena_chamber == 'fan' %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='canceled'
  _SD_PRINTER_STATS
  CANCEL_PRINT_BASE
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
  {% if ena_caselight == 'true' %} _CASELIGHT_OFF {% endif %}
  {% if ena_chamber == 'fan' %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if ena_filter == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={fan_off} {% endif %}
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### Get user defines #####
  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set retract = printer["gcode_macro _USER_VARIABLE"].retract_pause|float * -1 %}
  {% set purge_x = printer["gcode_macro _USER_VARIABLE"].purge_x %}
  {% set purge_y = printer["gcode_macro _USER_VARIABLE"].purge_y %}
  ##### store min and current extrution temp in variable ##### 
  {% set extruder_min = printer.configfile.config.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### either use brush bin position or user defined ##### 
  {% set x_park = params.X|default(purge_x) %}
  {% set y_park = params.Y|default(purge_y) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=toolhead_z VALUE={act_z}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  ##### added because of motion sensor #####
  ## not sure why but sometime it generate an runout event while heatsoak  
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % extruder_min)}
      M109 S{extruder_min} ; heat extruder and wait
  {% endif %}
  ##### added because of motion sensor ##### 
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=BLUE BLINK=1 SYNC=0 {% endif %}
  M117 Pause
  PAUSE_BASE
  G91
  G1 E{retract} F1800
  G1 Z{z_safe} F900
  G90
  G1 X{x_park} Y{y_park} F18000 ; park nozzle at brush bin or user defined
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### Get user defines #####
  {% set add_temp = printer["gcode_macro _USER_VARIABLE"].extruder_min_add|int %}
  {% set extrude = printer["gcode_macro _USER_VARIABLE"].retract_pause %}
  {% set act_z = printer["gcode_macro PAUSE"].toolhead_z %}
  ##### store min and current extrution temp in variable ##### 
  {% set extruder_min = printer.configfile.config.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RED {% endif %}
  M117 Printing
  {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % extruder_min)}
      M109 S{extruder_min} ; heat extruder and wait
  {% endif %}
  G90 
  G0 Z{act_z}
  G91
  G1 E{extrude} F2100
  # restore old extruder temperature
  M109 S{extruder_target}
  
  #G90
  RESUME_BASE {get_params}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

#####################################################################
#                 LCD menu that works with mainsail                 #
#####################################################################
#   Main
#   ...
#   + SD Card
#       + Show loaded file
#       + Load File (only if not printing and no file loaded)
#       + Unload File (only if not printing and a file is loaded)
#       + Start printing (only if not printing and a file is loaded)
#       + Pause printing (only while printing)
#       + Resume printing (only while paused)
#       + Cancel printing (only while paused)

[menu __main __sdcard]
type: list
enable: {'virtual_sdcard' in printer}
name: SD Card

[menu __main __sdcard __file]
type: command
name: File: {printer.print_stats.filename}
index: 0

[menu __main __sdcard __load]
type: vsdlist
#type: list
#event_sender: __vsdfiles
enable: {not printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Load file
index: 1

[menu __main __sdcard __unload]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Unload file
index: 2
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  SDCARD_RESET_FILE

[menu __main __sdcard __start]
type: command
enable: {printer.virtual_sdcard.file_path and not (printer.print_stats.state == "printing" or printer.print_stats.state == "paused")}
name: Start print
index: 3
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  M24

[menu __main __sdcard __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause print
gcode:
  # back is needed to reload the modified menu structure
  {menu.back()}
  PAUSE

[menu __main __sdcard __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  RESUME

[menu __main __sdcard __cancel]
type: command
enable: {printer.print_stats.state == "paused"}
name: Cancel print
gcode:
  {menu.exit()}
  UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  CANCEL_PRINT