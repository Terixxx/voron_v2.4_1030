#####################################################################
#  Probe
#####################################################################
############### Different Probe Settings ###############
##  Omron: 
##  speed: 10.0
##  samples: 9
##  samples_result: median
##  sample_retract_dist: 0.5
##  samples_tolerance: 0.006
##  samples_tolerance_retries: 10
########################################################
##  Super Pinda:
##  speed: 7.5
##  lift_speed: 30.0
##  samples: 6
##  samples_result: median
##  sample_retract_dist: 0.8
##  samples_tolerance: 0.005
##  samples_tolerance_retries: 10
############### Different Probe Settings ###############
#[probe]
##  Inductive Probe
##  This probe is not used for Z height 
##  Only used for Quad Gantry Leveling and Bed Mesh
#pin: z:P1.24
#x_offset: 0
#y_offset: 25.0
#z_offset: 0
#speed: 7.5
#lift_speed: 30.0
#samples: 5
#samples_result: median
#sample_retract_dist: 0.8
#samples_tolerance: 0.005
#samples_tolerance_retries: 10


#####################################################################
#  Gantry Adjustment Routines
#####################################################################
[quad_gantry_level]
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle  
##  to respective belt positions
gantry_corners = 
	-60,-10
	360,370
##  Probe points
##  This are nozzel positions we need to substract the probe offset
points = 
	50,25
	50,225
	250,225
	250,25
speed: 450
horizontal_move_z: 5
retries: 10
retry_tolerance: 0.0045
max_adjust: 15

#####################################################################
#  Macros
#####################################################################
## customize QUAD GANTRY LEVEL gcode 
[gcode_macro QUAD_GANTRY_LEVEL]
description: Conform a moving, twistable gantry to the shape of a stationary bed
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
  #####  get user defines  #####
  {% set center_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set center_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set z_min_delta = printer['gcode_macro _USER_VARIABLE'].z_min_delta %}
  #####  set default  #####
  {% set park = params.PARK|default('true') %}
  #####  end of definitions  #####
  SAVE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL
  _SET_Z_CURRENT VAL=HOME
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}
  QUAD_GANTRY_LEVEL_BASE
  G28 Z
  _SET_Z_CURRENT
  {% if park|lower == 'true' %}
    G90
    G0 Z{z_min_delta} F1800           ; move nozzle to z high first
    G0 X{center_x} Y{center_x} F18000 ; home to get toolhead in the middle
  {% endif %}
  RESTORE_GCODE_STATE NAME=STATE_QUAD_GANTRY_LEVEL

[delayed_gcode _CHECK_QGL]
gcode:
  #####  Get user defines  #####
  {% set center_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set center_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set z_min_delta = printer['gcode_macro _USER_VARIABLE'].z_min_delta %}
  #####  end of definitions  #####
  # check that QGL ended with no error 
  {% if printer.quad_gantry_level.applied|lower == 'false' %}
    # stop print if QGL stopped with failuare
    {action_respond_info("CANCEL PRINT BECAUSE OF QGL ERROR")}
    CANCEL_PRINT
    _LCD_KNOB COLOR=RED BLINK=0.2
    SAVE_GCODE_STATE NAME=STATE_CHECK_QGL
    G90
    G0 Z{z_min_delta} F1800           ; move nozzle to z high first
    G0 X{center_x} Y{center_x} F18000 ; home to get toolhead in the middle
    RESTORE_GCODE_STATE NAME=STATE_CHECK_QGL
  {% endif %}