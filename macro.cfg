#####################################################################
#  Macros
#####################################################################

[gcode_macro PRINT_START]
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  RETRACT_LEN   : Retract length for firmware retracts
##  RETRACT_SPD   : Retract speed for firmware retracts
##  System Varables
variable_redo_qgl: 'true'
# change this to define the wait time per call
variable_extruder: 245
variable_bed: 100
variable_endstop: 0
variable_retract_len: 0.75
variable_retract_spd: 70
## Valid state 
##   Prepare : decision if heat Soak is needed 
##   HeatSoak: loop the time specified with SOAK
##   Final   : all what needs to be done after wait timet
variable_state: 'Prepare'
variable_first: 'true'
variable_soak: 0.35
variable_pwm: 1
variable_avgpwm: 1
variable_tests: 0
variable_left: 30

gcode:
  {% set bed_temp = params.BED_TEMP|default(100) %}
  {% set extruder_temp= params.EXTRUDER_TEMP|default(245) %}
  {% set chamber_temp= params.CHAMBER_TEMP|default(50) %}
  {% set soak = params.SOAK|default(0.35) %}
  {% set retract_len = params.RETRACT_LEN|default(0.75) %}
  {% set retract_spd = params.RETRACT_SPD|default(70) %}
  {% set actBed = printer.heater_bed.temperature|float %}
  {% set actPwm = printer.heater_bed.power|float %}

  {% if printer["gcode_macro PRINT_START"].state == 'Prepare' %}  
      SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
      SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp|int}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bed VALUE={bed_temp}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE=30
      # check if filament is loaded 
      # get filament state either use the safe variable or the runout sensor
      {% if 'filament_switch_sensor runout' in printer.configfile.settings %}
          {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
              {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
          {% else %}
              {% set filament_detected = printer.save_variables.variables.filament_loaded %}
          {% endif %}
      {% elif 'filament_motion_sensor runout' in printer.configfile.settings %}
          {% if printer['filament_motion_sensor runout'].enabled|lower == 'true' %}
              {% set filament_detected = printer['filament_motion_sensor runout'].filament_detected|lower %}
          {% else %}
              {% set filament_detected = printer.save_variables.variables.filament_loaded %}
          {% endif %}
      {% else %}
          {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% endif %}
      #if everything's OK then go on
      {% if filament_detected == 'true' %}
          _CASELIGHT_ON
          FILTER_ON               ; activate filter
          LCD_KNOB COLOR=RED BLINK=1
          M141 S0                  ; exhaust fan off
          CG28                    ; home if needed
          # Move to Middle
          SET_RETRACTION RETRACT_LENGTH={retract_len|float} RETRACT_SPEED={retract_spd|int}
          G90
          G0 Z30 F1800             ; move nozzle to z high first
          G0 X150 Y150 F18000      ; home to get toolhead in the middle

          _PRINT_AR T="Heating Bed"
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'

          M106 S90              ; switch part cooling ~35% to move air in chamber
          M190 S{bed_temp|int}  ; heat bed and wait
          M400                  ; wait for buffer to clear
          PAUSE_BASE
          {% set pwm = printer['heater_bed'].power | float %}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE={pwm}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=avgpwm VALUE={pwm}
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE=1
          _PRINT_AR T="{"T:%02d/30 P:%.3f/%.3f" % (left|int,pwm|float,soak|float)}"
          # Call the wait macro the first time
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
          UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=1

      {% else %}
          _PRINT_AR T="No Filament loaded, print canceled!"
          CANCEL_PRINT_BASE
          UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
      {% endif%}
      
  {% elif printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}  
      {% if left == 0 %}
          {% if avgpwm >= soak|float %}
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE=0
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE=0
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE=30
          {% else %}
              {action_respond_info("Done. Mean PWM: %f" % (avgpwm|float))}
              SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Extruder"'
          {% endif %}
      {% endif %}
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=1
  {% elif printer["gcode_macro PRINT_START"].state == 'Extruder' %}  
      {action_respond_info("Heating extruder now")}
      RESUME_BASE
      M109 S{extruder}
      M400
      PAUSE_BASE
      {action_respond_info("Extruder is heated now")}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=START_PRINT_WAIT DURATION=1
  {% elif printer["gcode_macro PRINT_START"].state == 'Final' %}  
      RESUME_BASE
      # set staus back to prepare for the next run 
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
      M106 S0  ; turn off part cooling fan
      LCD_KNOB COLOR=RED
      G21  ; set units to millimeters
      G90  ; use absolute coordinates
      M83  ; use relative distances for extrusion
      G32  ; home & QGL
      M141 S{chamber_temp|int}  ; set target temp for exhaust fan
      NOZZLECLEAN
      G0 X204 Y301 Z50 F10000
      MESH_LOAD AUTO=true
      CALIBRATE_Z ; Go through Z-offset calibration for current table
      M117 Heating Extruder
      M109 S{extruder|int} ; heat extruder and wait
      PRIME_LINE
      UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
      _PRINT_AR T="{"PRINT_START done. Endstop temp:%2.2fC" % (printer['temperature_sensor endstop'].temperature)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=endstop VALUE={printer['temperature_sensor endstop'].temperature}
  {% endif %}

## Wait interval macro to break the loop
[delayed_gcode START_PRINT_WAIT]
gcode:
 # Print remaining time
  {% if printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
      {% set pwm = printer['heater_bed'].power | float %}
      {% set totalpwm = printer["gcode_macro PRINT_START"].pwm|float %}
      {% set tests = printer["gcode_macro PRINT_START"].tests|int + 1 %}
      {% set left = printer["gcode_macro PRINT_START"].left|int - 1 %}
      {% set soak = printer["gcode_macro PRINT_START"].soak | float %}
      {% set avgpwm = ((totalpwm+pwm)/tests)|float %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=avgpwm VALUE={avgpwm}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=pwm VALUE={(totalpwm+pwm)|float}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=tests VALUE={tests}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=left VALUE={left}

      M117 S{'T:%02d' % left|int}{'/30 P:%.2f' % (avgpwm|float)}{'/%.2f' % (soak|float)}
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Junp back to PRINT_START
    PRINT_START
  {% else %}
    # break loop
    # insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}

  
[gcode_macro PRINT_END]
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Get Boundaries #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Calculate save move #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  M400                                     ; wait for buffer to clear
  G92 E0                                   ; zero the extruder
  M83                                      ; relative extrusion
  G1 E-2.0 F3600                           ; retract filament
  G91                                      ; relative positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  TURN_OFF_HEATERS                         ; turn off heaters
  M107                                     ; turn off fan
  M141 S15                                 ; vent chamber (setting fan to below ambient)
  G90                                      ; absolute positioning
  G0 X25 Y302 F18000                       ; park nozzle at brush bin
  LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  UPDATE_DELAYED_GCODE ID=DELAY_VENT_OFF DURATION=1800
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  {% set endstop_start = printer["gcode_macro PRINT_START"].endstop %}
  {% set endstop_end = printer['temperature_sensor endstop'].temperature %}
  _PRINT_AR T="{"PRINT_END done. Endstop temp START:%2.2fC END:%2.2fC" % (endstop_start, endstop_end)}"
  UPDATE_DELAYED_GCODE ID=_MESH_SAVE DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

## Reset SD File after Print Done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  # Home only if needed 
  CG28 ; home if not already homed
  ## check if QGL was already executed
  ## variable redo_qgl will always force a QGL
  ## watchdog for QGL
  UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=300
  {% if printer["gcode_macro PRINT_START"].redo_qgl == 'true' %}
    _PRINT_AR T="QGL forced by PRINT_START"
    QUAD_GANTRY_LEVEL
    M400
    UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=1
  {% else %} 
    ## if no QGL was done until now
    {%  if printer.quad_gantry_level.applied|lower == 'false' %}
      _PRINT_AR T="QGL not executed yet"
      QUAD_GANTRY_LEVEL
      M400
      UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=1
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

## purge and clean the nozzle in prep for printing    
[gcode_macro NOZZLECLEAN]
gcode:
  # store min extrution temp in variable
  {% set minimTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  CG28                  ; home if not already homed
  G90                    ; absolute positioning
  G1 X35 Y308 Z10 F20000  ; move to purge bucket location
  # check the Extruder temp is above minimum extrution temp
  {% set extruder_target = printer.extruder.target %}
  {% if printer.extruder.temperature|int < minimTemp|int %}
    _PRINT_AR T="{"Extruder Temp to low heat to %2dC" % (minimTemp|int + 30)}"
    M109 S{minTemp|int + 30} ; heat extruder and wait
  {% endif %}
  G1 Z2.5 F900  ; lower Z
  G92 E0        ; reset Extruder
  M83           ; relative extrusion
  G1 E5.00 F500 ; purge filament (5mm)
  G1 E5.00 F800 ; purge filament (5mm)
  G1 E-0.5 F800 ; retract filament (0.5)
  G4 P500
  _WIPE
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  G90 ; absolute positioning
  # move to wiper start pos
  G0 X50.00 Y308 Z1.3 F3000
  # move head diagonal to brush
  {% for wipe in range(5) %}
    {% for coordinate in [(90,303),(50,303)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 1.0 * wipe} F{6000 + 1000 * wipe}
    {% endfor %}
  {% endfor %}
  G0 X90 Y308 F18000
    
[gcode_macro PRIME_LINE]
gcode:
  # define values for easiermodification
  {% set seg = 11 %}
  {% set lenght = 220 %}
  {% set extrude = 22 %}
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # calculate values of each segment
  {% set y_seg = lenght|float / seg|float %}
  {% set e_seg = extrude|float / seg|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  CG28                                  ; home if not already homed
  G92 E0                                 ; reset Extruder
  G90                                    ; absolute positioning
  G1 X5 Y30 Z5 F10000                    ; move to start position
  G1 Z0.24 F900                          ; move Z Axis down
  M83                                    ; relative extrusion
  G91                                    ; relative positioning
  {% for segment in range(seg|int-1) %}  ; draw the first line
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4                                ; move to side
  {% for segment in range(seg|int-1) %}  ; draw the second line
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G1 Z5.0 F1500                          ; move Z Axis up
  G92 E0                                 ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

## Different Park positions
[gcode_macro PARKFRONT]
description: Park head front high
##### Set all needed delta values for all park macros here #####
variable_boarder_delta: 25 ; Distance for x/y from the edge
variable_y_max_offset: 5   ; Endstop offset from bed max
variable_z_max_delta: 40   ; insure to do not hit cam in front
variable_z_min_delta: 30   ; minimal z from bed
gcode:
  ##### Get needed max/min/delta #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set min_y = printer.toolhead.axis_minimum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  ##### calc park pos #####
  {% set park_x = max_x / 2 %}
  {% set park_y = min_y + boarder_delta %}
  {% set park_z = max_z - z_max_delta %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
  
[gcode_macro PARKFRONTLOW]
description: Park head front low
gcode:
  ##### Get needed max/min/delta #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set min_y = printer.toolhead.axis_minimum.y|float %}
  {% set z_min_delta = printer["gcode_macro PARKFRONT"].z_min_delta|float %}
  {% set boarder_delta = printer["gcode_macro PARKFRONT"].boarder_delta|float %}
  ##### calc park pos #####
  {% set park_x = max_x / 2 %}
  {% set park_y = min_y + boarder_delta %}
  {% set park_z = z_min_delta %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PARKFRONTLOW
  CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONTLOW
   
[gcode_macro PARKREAR]
description: Park head rear high
gcode:
  ##### Get needed max/min/delta #####
  {% set min_x = printer.toolhead.axis_minimum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set z_max_delta = printer["gcode_macro PARKFRONT"].z_max_delta|float %}
  {% set boarder_delta = printer["gcode_macro PARKFRONT"].boarder_delta|float %}
  ##### calc park pos #####
  {% set park_x = min_x + boarder_delta %}
  {% set park_y = max_y - boarder_delta %}
  {% set park_z = max_z - z_max_delta %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
description: Park head middle of printer
gcode:
  ##### Get needed max/min/delta #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set y_max_offset = printer["gcode_macro PARKFRONT"].y_max_offset|float %}
  ##### calc park pos #####
  {% set park_x = max_x / 2 %}
  {% set park_y = (max_y - y_max_offset) / 2 %}
  {% set park_z = max_z / 2 %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
description: Park head middle of bed low
gcode:
    ##### Get needed max/min/delta #####
  {% set max_x = printer.toolhead.axis_minimum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set y_max_offset = printer["gcode_macro PARKFRONT"].y_max_offset|float %}
  {% set z_min_delta = printer["gcode_macro PARKFRONT"].z_min_delta|float %}
  ##### calc park pos #####
  {% set park_x = max_x / 2 %}
  {% set park_y = (max_y - y_max_offset) / 2 %}
  {% set park_z = z_min_delta %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X150 Y150 Z30 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
gcode:
  # set default parameter value
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
gcode:
  #set default parameter value
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}      

[gcode_macro M204]
rename_existing: M2041
gcode:
  {% if 'S' in params %}
    {% set param_accel = params.S|float %}
  {% elif 'P' in params %}
    {% set param_accel = params.P|float %}
  {% elif 'T' in params %}
    {% set param_accel = params.T|float %}
  {% endif %}
  # calc accel_to deccel
  {% set param_accel_to_decel = (param_accel * 2.0 / 3.0) %}
  # get limits from config
  {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
  {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
  # limit values to config values 
  {% if param_accel < max_accel %}
    {% set accel = param_accel|int %}
  {% else %}
    {% set accel = max_accel|int %}
  {% endif%}
  {% if param_accel_to_decel < max_accel_to_decel %}
    {% set accel_to_decel = param_accel_to_decel|int %}
  {% else %}
    {% set accel_to_decel = max_accel_to_decel|int %}
  {% endif %}
  # end of definition
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}


[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  M115.1