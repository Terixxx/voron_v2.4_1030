[gcode_arcs]
resolution: 0.1

#####################################################################
#  Macros
#####################################################################
[gcode_macro PRINT_START]
##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  RETRACT_LEN   : Retract length for firmware retracts
##  RETRACT_SPD   : Retract speed for firmware retracts
##  System Varables
variable_redo_qgl: 'true'
variable_soak_tval: 0
# change this to define the wait time per call
variable_soak_ival: 1
variable_chamber: 40
variable_delta_chamber: 10
variable_soak_time_c: 0
variable_extruder: 245
variable_endstop: 0
variable_retract_len: 0.75
variable_retract_spd: 70
## Valid state 
##   Prepare : decision if heat Soak is needed 
##   HeatSoak: loop the time specified with SOAK
##   Chamber : wait for chamber reached CHAMBER_HEAT_SOAK 
##   Final   : all what needs to be done after wait timet
variable_state: 'Prepare'
variable_first: 'true'
gcode:
  # set default parameter value
  {% set bed_temp = params.BED_TEMP|default(100) %}
  {% set extruder_temp= params.EXTRUDER_TEMP|default(245) %}
  {% set chamber_temp = params.CHAMBER_TEMP|default(50) %}
  {% set soak = params.SOAK|default(30) %}
  {% set delta_b = params.DELTA_B|default(15) %}
  {% set delta_c = params.DELTA_C|default(10) %}
  {% set chamber_soak = params.CHAMBER_SOAK|default(15) %}
  {% set extra_soak = params.EXTRA_SOAK|default('false') %}
  {% set retract_len = params.RETRACT_LEN|default(0.75) %}
  {% set retract_spd = params.RETRACT_SPD|default(70) %}
  # get actual temp from the bed either use an external sensor
  # or the sensor from the bed heater
  # external sensor must be named bed
  {% if 'temperature_sensor bed' in printer %}
    {% set actBed = printer['temperature_sensor bed'].temperature %}
  {% else %}
    {% set actBed = printer.heater_bed.temperature %}
  {% endif %}
  ##  Prepare phase only dome at the first exection of PRINT_START
  {% if printer["gcode_macro PRINT_START"].state == 'Prepare' %}
    #############  Variable Setup  #############
    {% set targetBed = bed_temp|int - delta_b|int%}
    SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"true"'
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extruder VALUE={extruder_temp|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chamber VALUE={chamber_temp|int}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=delta_chamber VALUE={delta_c|int}
    {% if extra_soak == 'true' %}
       SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE={chamber_soak|int * 60}
    {% else %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE=0
    {% endif %}
    #############  Variable Setup  #############
    # check if filament is loaded 
      #_RUNOUT_INFO
      # get filament state either use the safe variable or the runout sensor
      {% if 'filament_switch_sensor runout' in printer.configfile.settings %}
       {% if printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
         {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected|lower %}
       {% else %}
         {% set filament_detected = printer.save_variables.variables.filament_loaded %}
       {% endif %}
      {% elif 'filament_motion_sensor runout' in printer.configfile.settings %}
       {% if printer['filament_motion_sensor runout'].enabled|lower == 'true' %}
         {% set filament_detected = printer['filament_motion_sensor runout'].filament_detected|lower %}
      {% else %}
         {% set filament_detected = printer.save_variables.variables.filament_loaded %}
       {% endif %}
     {% else %}
       {% set filament_detected = printer.save_variables.variables.filament_loaded %}
     {% endif %}
     {% if filament_detected == 'true' %}
      _DISPLAY_PLATE
      _CASELIGHT_ON
      _FILTER_ON               ; activate filter
      _LCD_KNOB COLOR=RED BLINK=1
      M141 S0                  ; exhaust fan off
      _CG28                    ; home if needed
      # Move to Middle
      SET_RETRACTION RETRACT_LENGTH={retract_len|float} RETRACT_SPEED={retract_spd|int}
      G90
      G0 Z30 F1800             ; move nozzle to z high first
      G0 X150 Y150 F18000      ; home to get toolhead in the middle
      # check if soak time is 0 or if the bed is still hot
      {% if (soak|int <= 0) or (actBed|int >= targetBed|int) %}
        M117 Heating Extruder
        {% if (soak|int <= 0) %}
          _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak disabled" % (actBed|int,targetBed|int,bed_temp|int,delta_b|int)}"
        {% else %}
          _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak not needed" % (actBed|int,targetBed|int,bed_temp|int,delta_b|int)}"
        {% endif %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"false"'
        M190 S{bed_temp|int}      ; heat bed and wait
        M109 S{extruder_temp|int} ; heat extruder and wait
        M400                      ; wait for buffer to clear
        BASE_PAUSE
        # go to chamber soak wait
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      {% else %}
        M117 Heating Bed
        _PRINT_AR T="{"Bed act temp:%3dC target:%3dC (target(%3dC) - delta(%dC)) heat soak needed" % (actBed|int,targetBed|int,bed_temp|int,delta_b|int)}"
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=redo_qgl VALUE='"true"'
        M106 S90              ; switch part cooling ~35% to move air in chamber
        M190 S{bed_temp|int}  ; heat bed and wait
        M400                  ; wait for buffer to clear
        BASE_PAUSE
        # Call the wait macro the first time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
        _PRINT_TIME TEXT="HEAT SOAK" TIME={soak|int * 60}
        {% if soak|int * 60 > ival|int %}
          # soak time is bigger than interval 
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={(soak|int * 60) - ival|int}
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
        {% else %}
          # soak time is smaller than interval
          SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
          UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={soak|int * 60}
        {% endif %}
      {% endif%}    
    {% else %}
      _PRINT_AR T="No Filament loaded, print canceled!"
      BASE_CANCEL_PRINT
      UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
    {% endif%}
  ## Heatsoak Phase call the delay macro until time is over
  {% elif printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    # switch on extruder at around 12 min left 
    {% if (tval|int) <= 720 + (extruder_temp|int) - 240  %}
      {%if extruder_temp|int != printer.extruder.target|int %}
        BASE_RESUME
        M104 S{extruder_temp} ; heat extruder
        M400                  ; wait for buffer to clear
        BASE_PAUSE
      {% endif %}
    {% endif %}
    # check remaining time 
    {% if tval|int > 0 %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        # run last loop with time
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_tval VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # go to chamber soak wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
      _PRINT_AR T="{"Bed act temp=%3dC heat soak done" % (actBed|int)}"
    {% endif %}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    # store variables for easier reading 
    {% set ival = printer["gcode_macro PRINT_START"].soak_ival %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_time_c %}
    {% set chamber = printer["gcode_macro PRINT_START"].chamber %}
    {% set delta = printer["gcode_macro PRINT_START"].delta_chamber %}
    {% set targetChamber = chamber - delta %}
    {% set actChamber = printer['temperature_fan chamber'].temperature %}
    # check remaining time and temp difference 
    {% if (tval|int > 0) and (actChamber|int < targetChamber|int) %}
      # print info only add firt run
      {% if printer["gcode_macro PRINT_START"].first == 'true' %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=first VALUE='"false"'
        _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak needed" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        _PRINT_TIME TEXT="CHAMBER" TIME={tval|int}
      {% endif %}
      # check if interval is bigger than remaining time
      {% if ival >= tval %}
        ## last loop 
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE=0
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={tval|int}
      {% else %}
        ## reduce time by interval
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=soak_time_c VALUE={tval|int - ival|int}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={ival|int}
      {% endif %}
    {% else %}
      # Finish PRINT_START
      {% if tval|int == 0 %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak disabled" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak timed out" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
         {% endif %}
      {% else %}
        {% if printer["gcode_macro PRINT_START"].first == 'true' %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak not needed" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% else %}
          _PRINT_AR T="{"Chamber act temp:%3dC target:%3dC (target(%2dC) - delta(%dC)) heat soak temp reached" % (actChamber|int,targetChamber|int, chamber|int, delta|int)}"
        {% endif %} 
      {% endif %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.1
    {% endif %}
  ## all whats need to run at the end
  {% elif printer["gcode_macro PRINT_START"].state == 'Final' %}
    BASE_RESUME
    # set staus back to prepare for the next run 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'     
    M106 S0  ; turn off part cooling fan
    _LCD_KNOB COLOR=RED
    G21  ; set units to millimeters
    G90  ; use absolute coordinates
    M83  ; use relative distances for extrusion
    G32  ; home & QGL
    M141 S{chamber_temp|int}  ; set target temp for exhaust fan
    NOZZLECLEAN
    G28 Z ; home
    MESH_LOAD AUTO=true
    # Check Extruder
    M117 Heating Extruder
    M109 S{extruder_temp|int} ; heat extruder and wait
    PRIME_LINE
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
    _PRINT_AR T="{"PRINT_START done. Endstop temp:%2.2fC" % (printer['temperature_sensor endstop'].temperature)}"
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=endstop VALUE={printer['temperature_sensor endstop'].temperature}
  {% endif %}
 
## Wait interval macro to break the loop
[delayed_gcode _START_PRINT_WAIT]
gcode:
  # store variables for easier reading 
  {% set extruder = printer["gcode_macro PRINT_START"].extruder %}
  {% set chamber = printer["gcode_macro PRINT_START"].chamber %}
  # Print remaining time
  {% if printer["gcode_macro PRINT_START"].state == 'HeatSoak' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_tval %}
    _PRINT_TIME TEXT="HEAT SOAK" TIME={tval|int}
  {% elif printer["gcode_macro PRINT_START"].state == 'Chamber' %}
    {% set tval = printer["gcode_macro PRINT_START"].soak_time_c %}
    _PRINT_TIME TEXT="SOAK" TIME={tval|int}
  {% endif %}
  # Check if printer is still in state 'Printing'
  {% if printer["gcode_macro CANCEL_PRINT"].execute == 'false' %}
    # Junp back to PRINT_START
    PRINT_START EXTRUDER_TEMP={extruder|int} CHAMBER_TEMP={chamber|int}
  {% else %}
    # break loop
    # insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE='"false"'
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
variable_print_done: 'false'
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  ##### Get Boundaries #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  ##### Calculate save move #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  M400                                     ; wait for buffer to clear
  G92 E0                                   ; zero the extruder
  M83                                      ; relative extrusion
  G1 E-2.0 F3600                           ; retract filament
  G91                                      ; relative positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  TURN_OFF_HEATERS                         ; turn off heaters
  M107                                     ; turn off fan
  M141 S15                                 ; vent chamber (setting fan to below ambient)
  G90                                      ; absolute positioning
  G0 X25 Y302 F18000                       ; park nozzle at brush bin
  _LCD_KNOB COLOR=GREEN
  _CASELIGHT_OFF
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=1
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION=1800
  SET_GCODE_VARIABLE MACRO=PRINT_END VARIABLE=print_done VALUE='"true"'
  {% set endstop_start = printer["gcode_macro PRINT_START"].endstop %}
  {% set endstop_end = printer['temperature_sensor endstop'].temperature %}
  _PRINT_AR T="{"PRINT_END done. Endstop temp START:%2.2fC END:%2.2fC" % (endstop_start, endstop_end)}"
  UPDATE_DELAYED_GCODE ID=_MESH_SAVE DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

## Reset SD File after Print Done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro G32]
gcode:
  SAVE_GCODE_STATE NAME=STATE_G32
  BED_MESH_CLEAR
  _SET_PLATE_OFFSET
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  # Home only if needed 
  _CG28 ; home if not already homed
  ## check if QGL was already executed
  ## variable redo_qgl will always force a QGL
  ## watchdog for QGL
  UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=300
  {% if printer["gcode_macro PRINT_START"].redo_qgl == 'true' %}
    _PRINT_AR T="QGL forced by PRINT_START"
    SET_GCODE_VARIABLE MACRO=QUAD_GANTRY_LEVEL VARIABLE=qgl_done VALUE='"false"'
    QUAD_GANTRY_LEVEL
    UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=1
  {% else %} 
    ## if no QGL was done until now
    {% if printer["gcode_macro QUAD_GANTRY_LEVEL"].qgl_done == 'false' %}
      _PRINT_AR T="QGL not executed yet"
      QUAD_GANTRY_LEVEL
      UPDATE_DELAYED_GCODE ID=_CHECK_QGL DURATION=1
    {% endif %}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_G32

## purge and clean the nozzle in prep for printing    
[gcode_macro NOZZLECLEAN]
gcode:
  # store min extrution temp in variable
  {% set minTemp = printer.configfile.config["extruder"]["min_extrude_temp"] %}
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                  ; home if not already homed
  G90                    ; absolute positioning
  G1 X35 Y308 Z10 F9000  ; move to purge bucket location
  # check the Extruder temp is above minimum extrution temp
  {% set extruder_target = printer.extruder.target %}
  {% if printer.extruder.temperature|int < minTemp|int %}
    _PRINT_AR T="{"Extruder Temp to low heat to %2dC" % (minTemp|int + 30)}"
    M109 S{minTemp|int + 30} ; heat extruder and wait
  {% endif %}
  G1 Z2.5 F900  ; lower Z
  G92 E0        ; reset Extruder
  M83           ; relative extrusion
  G1 E5.00 F500 ; purge filament (5mm)
  G1 E5.00 F800 ; purge filament (5mm)
  G1 E-0.5 F800 ; retract filament (0.5)
  G4 P500
  _WIPE
  # restore old extruder temperature
  M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro _WIPE]
gcode:
  G90 ; absolute positioning
  # move to wiper start pos
  G0 X50.00 Y308 Z1.3 F3000
  # move head diagonal to brush
  {% for wipe in range(5) %}
    {% for coordinate in [(90,303),(50,303)] %}
      G0 X{coordinate[0]} Y{coordinate[1] + 1.0 * wipe} F{6000 + 1000 * wipe}
    {% endfor %}
  {% endfor %}
  G0 X90 Y308 F18000
    
[gcode_macro PRIME_LINE]
gcode:
  # define values for easiermodification
  {% set seg = 11 %}
  {% set lenght = 220 %}
  {% set extrude = 22 %}
  SAVE_GCODE_STATE NAME=STATE_PRIME_LINE
  # calculate values of each segment
  {% set y_seg = lenght|float / seg|float %}
  {% set e_seg = extrude|float / seg|float %}
  _PRINT_AR T="Prime Line" SHOW_LCD=true
  _CG28                                  ; home if not already homed
  G92 E0                                 ; reset Extruder
  G90                                    ; absolute positioning
  G1 X5 Y30 Z5 F10000                    ; move to start position
  G1 Z0.24 F900                          ; move Z Axis down
  M83                                    ; relative extrusion
  G91                                    ; relative positioning
  {% for segment in range(seg|int-1) %}  ; draw the first line
    G1 Y{y_seg} E{e_seg} F1500.0
  {% endfor %}    
  G1 X0.4                                ; move to side
  {% for segment in range(seg|int-1) %}  ; draw the second line
    G1 Y-{y_seg} E{e_seg} F1500.0
  {% endfor %}
  G1 Z5.0 F1500                          ; move Z Axis up
  G92 E0                                 ; reset Extruder
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE NAME=STATE_PRIME_LINE

## Different Park positions
[gcode_macro PARKFRONT]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKFRONT
  _CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X150 Y30 Z150 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKFRONT
   
[gcode_macro PARKREAR]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKREAR
  _CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X10 Y290 Z150 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKREAR
   
[gcode_macro PARKCENTER]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKCENTER
  _CG28 ; Home if not already homed
  G90   ; absolute positioning
  G0 X150 Y150 Z150 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKCENTER
   
[gcode_macro PARKBED]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PARKBED
  _CG28 ; home if not already homed
  G90   ; absolute positioning
  G0 X150 Y150 Z30 F18000
  RESTORE_GCODE_STATE NAME=STATE_PARKBED
    
## use this if you need more then one action responeses in a order
## insight a macro
[gcode_macro _PRINT_AR]
gcode:
  # set default parameter value
  {% set show_lcd = params.SHOW_LCD|default('false') %}
  {% if show_lcd == 'true' %}
    M117 {'%s' % (params.T|string)}
  {% endif %}
  {action_respond_info("%s" % (params.T|string))}
        
[gcode_macro _PRINT_TIME]
gcode:
  #set default parameter value
  {% set text = params.TEXT|default('Timer') %}
  {% set show_ar = params.SHOW_AR|default('false') %}
  {% set minutes = ((params.TIME|int / 60) % 60)|int %}
  {% set seconds = (params.TIME|int % 60)|int %}
  M117 {'%s' % (TEXT)} {minutes|int}:{'%02d' % (seconds|int)}
  {%if show_ar == 'true' %}
    {action_respond_info("%s %d:%02d" % (text,minutes|int,seconds|int))}
  {% endif %}      

[gcode_macro M204]
rename_existing: M2041
gcode:
  {% if 'S' in params %}
    {% set param_accel = params.S|float %}
  {% elif 'P' in params %}
    {% set param_accel = params.P|float %}
  {% elif 'T' in params %}
    {% set param_accel = params.T|float %}
  {% endif %}
  # calc accel_to deccel
  {% set param_accel_to_decel = (param_accel * 2.0 / 3.0) %}
  # get limits from config
  {% set max_accel = printer.configfile.settings.printer.max_accel|float %}
  {% set max_accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel|float %}
  # limit values to config values 
  {% if param_accel < max_accel %}
    {% set accel = param_accel|int %}
  {% else %}
    {% set accel = max_accel|int %}
  {% endif%}
  {% if param_accel_to_decel < max_accel_to_decel %}
    {% set accel_to_decel = param_accel_to_decel|int %}
  {% else %}
    {% set accel_to_decel = max_accel_to_decel|int %}
  {% endif %}
  # end of definition
  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh VORON-0C-MUELLER"] %}
#    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
#    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}
  
[gcode_macro DUMP_SETTINGS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.settings %}
    {% set show = ['extruder'] %}
    {% if name1 is not in show %}
      {% set param = "printer.configfile.settings['%s'] = %s" % (name1, printer.configfile.settings[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_MCU_VER]
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}
        

[gcode_macro DUMP_STATS]
gcode:
  {% set cpu_t = printer.system_stats.cputime %}
  {% set cpu_h = (cpu_t / 3600)|int %}
  {% set cpu_m = ((cpu_t / 60) % 60)|int %}
  {% set cpu_s = (cpu_t % 60)|int %}
  {% set sysload = printer.system_stats.sysload|float * 100.0 %}
  {% set mem_val = printer.system_stats.memavail|float / 8388608.0 %}
  {action_respond_info("klipper process statistic:
                        Head stalls: %d
                        CPU Time: %d:%02d:%02d
                        Sysload: %.2f percent
                        Mem Val: %.3f MB" % (printer.toolhead.stalls, cpu_h, cpu_m ,cpu_s, sysload, mem_val))}